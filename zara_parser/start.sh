#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Zara API –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ AWS —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./start.sh [test|full|resume|stop|status|logs|monitor|cleanup|help]

set -e

PROJECT_NAME="zara-api-parser"
COMPOSE_FILE="docker-compose.yml"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  INFO: $1${NC}"
}

header() {
    echo -e "${PURPLE}"
    echo "=================================================================="
    echo "  üï∑Ô∏è  ZARA API PARSER - AWS DEPLOYMENT SCRIPT"
    echo "=================================================================="
    echo -e "${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'docker compose' –≤–º–µ—Å—Ç–æ 'docker-compose'"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE="docker compose"
    else
        DOCKER_COMPOSE="docker-compose"
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $DOCKER_COMPOSE)"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
prepare_environment() {
    log "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p output logs
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod +x start.sh
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ api_en.py
    if [ ! -f "api_en.py" ]; then
        error "–§–∞–π–ª api_en.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!"
        exit 1
    fi
    
    log "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
start_parser() {
    local mode=$1
    
    log "–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ: $mode"
    
    case $mode in
        "test")
            log "–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö)..."
            $DOCKER_COMPOSE -p $PROJECT_NAME up -d --build
            sleep 5
            $DOCKER_COMPOSE -p $PROJECT_NAME exec zara-api-parser python -u api_en.py --test --adults
            ;;
        "full")
            log "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö)..."
            $DOCKER_COMPOSE -p $PROJECT_NAME up -d --build
            ;;
        "resume")
            log "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞..."
            $DOCKER_COMPOSE -p $PROJECT_NAME up -d --build
            sleep 5
            $DOCKER_COMPOSE -p $PROJECT_NAME exec zara-api-parser python -u api_en.py --adults --resume
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode"
            show_usage
            exit 1
            ;;
    esac
    
    log "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!"
    info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './start.sh status' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
    info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ './start.sh logs' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
stop_parser() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞..."
    $DOCKER_COMPOSE -p $PROJECT_NAME down
    log "–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞..."
    echo ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    $DOCKER_COMPOSE -p $PROJECT_NAME ps
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
    if $DOCKER_COMPOSE -p $PROJECT_NAME ps -q | grep -q .; then
        echo ""
        info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        docker stats --no-stream $($DOCKER_COMPOSE -p $PROJECT_NAME ps -q) 2>/dev/null || true
        
        echo ""
        info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤:"
        $DOCKER_COMPOSE -p $PROJECT_NAME logs --tail=10 zara-api-parser
    else
        warn "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
show_logs() {
    local service=${1:-"zara-api-parser"}
    local lines=${2:-100}
    
    log "–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö $lines —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: $service"
    echo ""
    
    if $DOCKER_COMPOSE -p $PROJECT_NAME ps -q $service | grep -q .; then
        $DOCKER_COMPOSE -p $PROJECT_NAME logs -f --tail=$lines $service
    else
        error "–°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: ./start.sh full"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_monitoring() {
    log "–ó–∞–ø—É—Å–∫ –≤–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤..."
    $DOCKER_COMPOSE -p $PROJECT_NAME --profile monitoring up -d log-viewer
    echo ""
    info "üåê –í–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080"
    info "üìù –ò–ª–∏ http://YOUR_AWS_IP:8080 (–∑–∞–º–µ–Ω–∏—Ç–µ YOUR_AWS_IP –Ω–∞ IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)"
    echo ""
    warn "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç 8080 –æ—Ç–∫—Ä—ã—Ç –≤ security group AWS!"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    warn "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    $DOCKER_COMPOSE -p $PROJECT_NAME down 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã Docker
    docker system prune -f
    docker volume prune -f
    
    log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
show_files() {
    log "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:"
    echo ""
    
    if [ -d "output" ]; then
        info "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è output/ (JSON —Ñ–∞–π–ª—ã):"
        ls -la output/ 2>/dev/null || echo "  –ü—É—Å—Ç–æ"
    fi
    
    if [ -d "logs" ]; then
        info "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs/ (–ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞):"
        ls -la logs/ 2>/dev/null || echo "  –ü—É—Å—Ç–æ"  
    fi
    
    info "üìÑ JSON —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    ls -la *.json 2>/dev/null || echo "  –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
show_usage() {
    header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [COMMAND]"
    echo ""
    echo "üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    echo ""
    echo "  üß™ test      - –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"
    echo "  üöÄ full      - –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≤—Å–µ –≤–∑—Ä–æ—Å–ª—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)" 
    echo "  ‚èØÔ∏è  resume    - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    echo "  ‚èπÔ∏è  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"
    echo "  üìä status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "  üìù logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞"
    echo "  üåê monitor   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ (–ø–æ—Ä—Ç 8080)"
    echo "  üìÅ files     - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    echo "  üóëÔ∏è  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã"
    echo "  ‚ùì help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:"
    echo ""
    echo "  ./start.sh test          # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (–±—ã—Å—Ç—Ä–æ)"
    echo "  ./start.sh full          # –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    echo "  ./start.sh status        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç"
    echo "  ./start.sh logs          # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  ./start.sh monitor       # –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–æ–≤"
    echo "  ./start.sh files         # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã"
    echo ""
    echo "üîß –ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
    echo ""
    echo "  ‚Ä¢ –ü–∞—Ä—Å–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    echo "  ‚Ä¢ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/"
    echo "  ‚Ä¢ –í–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
    echo "  ‚Ä¢ –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏"
    echo "  ‚Ä¢ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª - –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local command=${1:-"help"}
    
    case $command in
        "test"|"full"|"resume")
            header
            check_dependencies
            prepare_environment
            start_parser $command
            echo ""
            info "üéâ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
            info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
            echo "     ./start.sh status   - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "     ./start.sh logs     - —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
            echo "     ./start.sh files    - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã"
            echo "     ./start.sh stop     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            ;;
        "stop")
            stop_parser
            ;;
        "status")
            check_status
            ;;
        "logs")
            show_logs ${2:-"zara-api-parser"} ${3:-100}
            ;;
        "monitor")
            start_monitoring
            ;;
        "files")
            show_files
            ;;
        "cleanup")
            cleanup
            ;;
        "help"|*)
            show_usage
            ;;
    esac
}

# –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'echo ""; warn "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
