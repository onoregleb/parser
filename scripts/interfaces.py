import tempfile
import time
import random
from pathlib import Path

from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from playwright.sync_api import sync_playwright
from pymongo.errors import DuplicateKeyError
from selenium.webdriver.common.by import By
from pymongo import MongoClient
from selenium import webdriver


class MongoInterface:
    def __init__(self, connection_uri: str, database: str = "farfetch_db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            connection_uri: URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
            database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'farfetch_db')
        """
        self._client = MongoClient(connection_uri)
        self._database = self._client[database]

    def create_collection(self, collection_name: str):
        if collection_name in self._database.list_collection_names():
            raise Exception(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")    
        
        collection = self._database[collection_name]
        collection.create_index("url", unique=True)

    def insert_data(self, collection_name, data_sample):
        collection = self._database[collection_name]
        try:
            collection.insert_one(data_sample)
        except DuplicateKeyError as exc:
            print(f"URL: {data_sample['url']} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")


class WebDriverInterface:
    def __init__(self, page_loading_time: int = 3):
        chrome_options = Options()
        chrome_options.binary_location = "/usr/bin/chromium-browser"
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")

        temp_dir = tempfile.mkdtemp()
        chrome_options.add_argument(f"--user-data-dir={temp_dir}")

        self.driver = webdriver.Chrome(service=Service("/usr/bin/chromedriver"), options=chrome_options)
        self._page_loading_time = page_loading_time

    def get_number_of_pages(self, url: str):
        self.driver.get(url)
        time.sleep(self._page_loading_time)
        element = self.driver.find_element(By.XPATH, '//*[@data-component="PaginationLabel"]')
        if element:
            return int(element.text.split(" –∏–∑ ")[1])
        return 0

    def get_elements(self, url: str):
        self.driver.get(url=url)
        time.sleep(self._page_loading_time)
        catalog = self.driver.find_element(By.ID, 'catalog-grid')
        elements = catalog.find_elements(By.XPATH, './/*[@data-component="ProductCardLink"]')
        if elements:
            return [x.get_attribute("href") for x in elements]
        return []

    def parse_elements(self, links, category, gender):
        data = []
        for link in links[:10]:
            self.driver.get(link)
            time.sleep(self._page_loading_time)
            try:
                page = self.driver.find_element(By.ID, 'content')
            except Exception as exc:
                print(f"Content parsing error in {link}")
                continue

            images = [x.get_attribute("src") for x in page.find_elements(By.XPATH, './/*[@data-component="Img"]')]
            try:
                price = page.find_element(By.XPATH, './/*[@data-component="PriceLarge"]').text
            except Exception as exc:
                print(f"Price parsing error in {link}")
                price = None
            
            try:
                short_description = page.find_element(By.XPATH, './/*[@data-component="Body"][@data-testid="product-short-description"]').text
            except Exception as exc:
                print(f"Short description parsing error in {link}")
                short_description = None

            data.append({
                "url": link,
                "images": images,
                "price": price,
                "short_description": short_description,
                "category": category,
                "gender": gender
            })

        return data


class PlaywrightInterface:
    def __init__(self, page_loading_time: int = 3, headless: bool = True, request_delay: tuple = (24, 60)):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        Args:
            page_loading_time: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            headless: –∑–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ
            request_delay: –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (min, max)
        """
        self.page_loading_time = page_loading_time
        self.request_delay = request_delay
        self.playwright = sync_playwright().start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        self._init_browser(headless)

    def _init_browser(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.browser = self.playwright.chromium.launch(headless=headless)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        self.page = self.browser.new_page(user_agent=(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/120.0.0.0 Safari/537.36"
        ))

        # –¢–∞–π–º–∞—É—Ç—ã
        self.page.set_default_timeout(30000)
        self.page.set_default_navigation_timeout(60000)

    def safe_goto(self, url, add_delay=True):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å retry –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞–Ω–Ω–µ—Ä–æ–≤"""
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if add_delay:
            delay = random.uniform(self.request_delay[0], self.request_delay[1])
            print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}s –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º...")
            time.sleep(delay)
        
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                response = self.page.goto(url, wait_until="domcontentloaded", timeout=60000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response and response.status == 429:
                    print(f"üö´ Rate limit (429)! –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(60)
                    continue
                elif response and response.status >= 400:
                    print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ {response.status}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                current_url = self.page.url
                if "items.aspx" not in current_url and "page=" in url:
                    print(f"‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {current_url}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
                self.page.wait_for_selector(
                    '[data-component="PriceCallout"], [data-testid="productCard"], [data-component="PaginationLabel"]',
                    timeout=15000
                )

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º pop-up / –∫—É–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if attempt == 0:
                    for btn_text in ["Accept All", "Continue", "–ü—Ä–∏–Ω—è—Ç—å"]:
                        try:
                            self.page.locator(f'button:has-text("{btn_text}")').click(timeout=2000)
                        except:
                            pass

                return True
            except Exception as e:
                error_name = type(e).__name__
                error_msg = str(e)
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {error_name}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg[:200]}")
                
                if attempt < max_retries - 1:
                    delay = 5 * (attempt + 1)
                    print(f"‚è±Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error_name} - {error_msg[:100]}")
        return False

    def get_number_of_pages(self, url: str):
        if not self.safe_goto(url):
            return 0
        try:
            element = self.page.locator('[data-component="PaginationLabel"]').first
            text = element.text_content()
            if text:
                return int(text.split(" –∏–∑ ")[1])
        except Exception:
            return 0
        return 0

    def get_elements(self, url: str):
        if not self.safe_goto(url):
            return []
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
            self.page.wait_for_selector('#catalog-grid', timeout=10000)
            catalog_links = self.page.locator('#catalog-grid [data-component="ProductCardLink"]')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            count = catalog_links.count()
            if count == 0:
                print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                return []
            
            hrefs = catalog_links.evaluate_all("els => els.map(e => e.href)")
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(hrefs)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return hrefs or []
        except Exception as exc:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {type(exc).__name__}")
            return []

    def parse_elements(self, links, category, gender):
        data = []
        for i, link in enumerate(links):
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º request_delay)
            if i > 0:
                delay = random.uniform(self.request_delay[0], self.request_delay[1])
                print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}s –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏...")
                time.sleep(delay)
            
            if not self.safe_goto(link, add_delay=False):
                continue
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images = self.page.locator('[data-component="Img"]').evaluate_all(
                    "els => els.map(e => e.src)"
                )

                # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
                price_selector = (
                    '[data-component="PriceLarge"], '
                    '[data-component="PriceFinal"], '
                    '[data-component="PriceOriginal"], '
                    '[data-component="PriceWithSchema"], '
                    '[itemprop="price"]'
                )
                try:
                    self.page.wait_for_selector(price_selector, timeout=30000)
                    price = self.page.locator(price_selector).first.text_content()
                except:
                    print(f"‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ {link}")
                    price = None

                # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                try:
                    short_description = self.page.locator(
                        '[data-component="Body"][data-testid="product-short-description"]'
                    ).first.text_content()
                except:
                    short_description = None

                data.append({
                    "url": link,
                    "images": images,
                    "price": price,
                    "short_description": short_description,
                    "category": category,
                    "gender": gender
                })
            except Exception as exc:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {link}: {exc}")
                continue

        return data

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Playwright"""
        self.browser.close()
        self.playwright.stop()


class ZaraPlaywrightInterface:
    def __init__(self, page_loading_time: int = 3, headless: bool = True, request_delay: tuple = (24, 60), items_limit: int = 200):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Zara
        
        Args:
            page_loading_time: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            headless: –∑–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ
            request_delay: –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (min, max)
            items_limit: –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        self.page_loading_time = page_loading_time
        self.request_delay = request_delay
        self.items_limit = items_limit
        self.playwright = sync_playwright().start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        self._init_browser(headless)

    def _init_browser(self, headless: bool = True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.browser = self.playwright.chromium.launch(headless=headless)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        self.page = self.browser.new_page(user_agent=(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/120.0.0.0 Safari/537.36"
        ))

        # –¢–∞–π–º–∞—É—Ç—ã
        self.page.set_default_timeout(30000)
        self.page.set_default_navigation_timeout(60000)

    def safe_goto(self, url, add_delay=True):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å retry –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–∞–Ω–Ω–µ—Ä–æ–≤"""
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if add_delay:
            delay = random.uniform(self.request_delay[0], self.request_delay[1])
            print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}s –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º...")
            time.sleep(delay)
        
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                response = self.page.goto(url, wait_until="domcontentloaded", timeout=60000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response and response.status == 429:
                    print(f"üö´ Rate limit (429)! –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(60)
                    continue
                elif response and response.status >= 400:
                    print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ {response.status}")
                    return False
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                time.sleep(self.page_loading_time)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º cookie banner –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if attempt == 0:
                    try:
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å cookie banner
                        self.page.locator('button:has-text("Close")').first.click(timeout=3000)
                        print("‚úì Cookie banner –∑–∞–∫—Ä—ã—Ç")
                    except:
                        pass

                return True
            except Exception as e:
                error_name = type(e).__name__
                error_msg = str(e)
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {error_name}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg[:200]}")
                
                if attempt < max_retries - 1:
                    delay = 5 * (attempt + 1)
                    print(f"‚è±Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def scroll_and_load_items(self, url: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–∫—Ä–æ–ª–ª–∏—Ç –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (infinite scroll)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        """
        if not self.safe_goto(url):
            return []
        
        print(f"üìú –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        all_links = []
        previous_count = 0
        no_new_items_count = 0
        max_no_new_items = 5  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        while len(all_links) < self.items_limit:
            # –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
            self.page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            time.sleep(2)  # –ñ–¥–µ–º –ø–æ–¥–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            
            try:
                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º heading level=3 –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
                product_headings = self.page.locator('heading[level="3"]').all()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                current_links = set()
                for heading in product_headings:
                    try:
                        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ —Ä—è–¥–æ–º —Å heading
                        link_element = heading.locator('xpath=ancestor::*[self::a]').first
                        href = link_element.get_attribute('href')
                        if href and href.startswith('http'):
                            current_links.add(href)
                    except:
                        continue
                
                all_links = list(current_links)
                current_count = len(all_links)
                
                print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {current_count}/{self.items_limit}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                if current_count == previous_count:
                    no_new_items_count += 1
                    if no_new_items_count >= max_no_new_items:
                        print(f"‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞.")
                        break
                else:
                    no_new_items_count = 0
                
                previous_count = current_count
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –≤—ã—Ö–æ–¥–∏–º
                if current_count >= self.items_limit:
                    print(f"‚úì –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: {self.items_limit}")
                    break
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ: {e}")
                break
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ items_limit —Ç–æ–≤–∞—Ä–æ–≤
        return all_links[:self.items_limit]

    def get_elements(self, url: str):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è infinite scroll
        """
        return self.scroll_and_load_items(url)

    def parse_elements(self, links, category, gender):
        """
        –ü–∞—Ä—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ Zara
        –ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞)
        """
        data = []
        for i, link in enumerate(links):
            print(f"\n[{i+1}/{len(links)}] –ü–∞—Ä—Å–∏–Ω–≥: {link}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
            if i > 0:
                delay = random.uniform(self.request_delay[0], self.request_delay[1])
                print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}s –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏...")
                time.sleep(delay)
            
            if not self.safe_goto(link, add_delay=False):
                continue
            
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                try:
                    title = self.page.locator('heading[level="1"]').first.text_content(timeout=10000)
                except:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
                    title = None
                
                # –¶–µ–Ω–∞
                try:
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π (generic —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "T " –¥–ª—è —Ç–µ–Ω–≥–µ)
                    price_elements = self.page.locator('generic').all()
                    price = None
                    for elem in price_elements:
                        text = elem.text_content()
                        if text and text.startswith('T ') and '.' in text:
                            price = text
                            break
                    if not price:
                        print(f"‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                except:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–Ω—ã")
                    price = None
                
                # –¶–≤–µ—Ç –∏ –∞—Ä—Ç–∏–∫—É–ª
                try:
                    # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –∫–Ω–æ–ø–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª–∞
                    color_paragraph = self.page.locator('paragraph').filter(has=self.page.locator('button')).first
                    color_text = color_paragraph.text_content()
                    # –§–æ—Ä–º–∞—Ç: "Brown | 2521/220/700"
                    if '|' in color_text:
                        color = color_text.split('|')[0].strip()
                        article = color_text.split('|')[1].strip()
                    else:
                        color = color_text
                        article = None
                except:
                    print(f"‚ö†Ô∏è –¶–≤–µ—Ç/–∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    color = None
                    article = None
                
                # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                try:
                    # –ò—â–µ–º paragraph —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
                    paragraphs = self.page.locator('paragraph').all()
                    description = None
                    for p in paragraphs:
                        text = p.text_content()
                        if text and len(text) > 50:  # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
                            description = text
                            break
                except:
                    print(f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    description = None
                
                # –°–æ—Å—Ç–∞–≤
                try:
                    composition_elements = self.page.locator('generic').all()
                    composition = None
                    for elem in composition_elements:
                        text = elem.text_content()
                        if text and 'Composition:' in text:
                            composition = text.replace('Composition: ', '')
                            break
                except:
                    composition = None
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ (–∫–Ω–æ–ø–∫–∏ "Enlarge image")
                try:
                    images = []
                    enlarge_buttons = self.page.locator('button').filter(has_text='Enlarge image').all()
                    for btn in enlarge_buttons[:8]:  # –ú–∞–∫—Å–∏–º—É–º 8 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        try:
                            img = btn.locator('img').first
                            img_src = img.get_attribute('src')
                            if img_src:
                                images.append(img_src)
                        except:
                            continue
                except:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    images = []
                
                # –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
                    buttons = self.page.locator('button').all()
                    availability = "Available"
                    for btn in buttons:
                        btn_text = btn.text_content()
                        if 'Notify me' in btn_text or 'Coming soon' in btn_text:
                            availability = "Coming soon"
                            break
                        elif 'Out of stock' in btn_text:
                            availability = "Out of stock"
                            break
                except:
                    availability = "Unknown"
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                item_data = {
                    "url": link,
                    "title": title,
                    "price": price,
                    "color": color,
                    "article": article,
                    "description": description,
                    "composition": composition,
                    "images": images,
                    "availability": availability,
                    "category": category,
                    "gender": gender
                }
                
                data.append(item_data)
                print(f"‚úì –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω: {title}")
                
            except Exception as exc:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {link}: {exc}")
                continue

        return data

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ Playwright"""
        self.browser.close()
        self.playwright.stop()