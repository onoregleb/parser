"""
–ü–∞—Ä—Å–µ—Ä Zara —á–µ—Ä–µ–∑ API (–ë–ï–ó Selenium/Playwright!)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É API Zara.

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
- –í 10-100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º Selenium
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
- –ù–∞–¥–µ–∂–Ω–µ–µ (–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å JavaScript)
- –ú–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ç—ã—Å—è—á–∏ —Ç–æ–≤–∞—Ä–æ–≤
"""

import requests
import json
import time
import random
from typing import List, Dict, Optional


class ZaraAPIParser:
    """–ü–∞—Ä—Å–µ—Ä Zara —á–µ—Ä–µ–∑ API"""
    
    def __init__(self, request_delay: tuple = (0.5, 1.5), items_limit: int = 15):
        """
        Args:
            request_delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (min, max) –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            items_limit: —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–∞—Ä—Å–∏—Ç—å (None = –≤—Å–µ)
        """
        self.request_delay = request_delay
        self.items_limit = items_limit
        self.session = requests.Session()
        
        # User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.zara.com/',
        })
        
    def _delay(self):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        delay = random.uniform(self.request_delay[0], self.request_delay[1])
        time.sleep(delay)
    
    def get_category_products(self, country: str, lang: str, category_id: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
        
        Args:
            country: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'kz', 'us', 'ru')
            lang: –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru')
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ URL)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}...")
        
        # API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        api_url = f"https://www.zara.com/{country}/{lang}/category/{category_id}/products"
        
        try:
            response = self.session.get(api_url, params={'ajax': 'true'})
            response.raise_for_status()
            data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            all_products = []
            
            if 'productGroups' in data:
                for group in data['productGroups']:
                    # –†–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    elements = group.get('elements', [])
                    products = group.get('products', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–ª—è
                    items = elements if elements else products
                    
                    for item in items:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º commercialComponents (—ç—Ç–æ –∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã)
                        commercial_components = item.get('commercialComponents', [])
                        
                        for product in commercial_components:
                            all_products.append(product)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.items_limit:
                all_products = all_products[:self.items_limit]
                print(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            return all_products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    def get_product_details(self, country: str, lang: str, product_id: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ API
        
        Args:
            country: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
            lang: –∫–æ–¥ —è–∑—ã–∫–∞
            product_id: ID —Ç–æ–≤–∞—Ä–∞
        
        Returns:
            –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        """
        api_url = f"https://www.zara.com/{country}/{lang}/products/{product_id}.json"
        
        try:
            response = self.session.get(api_url)
            response.raise_for_status()
            return response.json()
        except:
            # –ï—Å–ª–∏ API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
    
    def build_product_url(self, country: str, lang: str, seo_keyword: str, seo_product_id: str, product_id: int) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç URL —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ SEO –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            country: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
            lang: –∫–æ–¥ —è–∑—ã–∫–∞
            seo_keyword: SEO keyword –∏–∑ API
            seo_product_id: SEO product ID –∏–∑ API
            product_id: ID —Ç–æ–≤–∞—Ä–∞ (discernProductId)
        
        Returns:
            –ü–æ–ª–Ω—ã–π URL —Ç–æ–≤–∞—Ä–∞
        """
        # –§–æ—Ä–º–∞—Ç URL Zara: /country/lang/seo-keyword-pSEO_PRODUCT_ID.html?v1=PRODUCT_ID
        return f"https://www.zara.com/{country}/{lang}/{seo_keyword}-p{seo_product_id}.html?v1={product_id}"
    
    def parse_product(self, product_data: Dict, country: str, lang: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API –æ—Ç–≤–µ—Ç–∞
        
        Args:
            product_data: –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
            country: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
            lang: –∫–æ–¥ —è–∑—ã–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            product_id = product_data.get('id')
            name = product_data.get('name', '')
            price = product_data.get('price', 0) / 100  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –¥–µ–ª–∏–º –Ω–∞ 100
            reference = product_data.get('reference', '')
            section_name = product_data.get('sectionName', '')
            family_name = product_data.get('familyName', '')
            
            # SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
            seo = product_data.get('seo', {})
            seo_keyword = seo.get('keyword', '')
            seo_product_id = seo.get('seoProductId', '')
            discern_product_id = seo.get('discernProductId', product_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ–≤–∞—Ä–∞
            product_url = self.build_product_url(
                country, lang, seo_keyword, seo_product_id, discern_product_id
            )
            
            # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            detail = product_data.get('detail', {})
            display_reference = detail.get('displayReference', reference)
            colors = detail.get('colors', [])
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–º —Ü–≤–µ—Ç–µ (–æ–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π)
            color_info = {}
            images = []
            
            if colors:
                first_color = colors[0]
                color_info = {
                    'name': first_color.get('name', ''),
                    'reference': first_color.get('reference', ''),
                    'price': first_color.get('price', price) / 100,
                    'availability': first_color.get('availability', 'unknown')
                }
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                xmedia = first_color.get('xmedia', [])
                for media in xmedia:
                    if media.get('type') == 'image':
                        img_url = media.get('url', '')
                        # –ó–∞–º–µ–Ω—è–µ–º {width} –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        img_url = img_url.replace('{width}', '1920')
                        images.append(img_url)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            parsed_product = {
                'url': product_url,
                'id': product_id,
                'name': name,
                'reference': reference,
                'display_reference': display_reference,
                'price': price,
                'currency': 'KZT',  # –î–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
                'section': section_name,
                'family': family_name,
                'color': color_info.get('name', ''),
                'color_reference': color_info.get('reference', ''),
                'availability': color_info.get('availability', 'unknown'),
                'images': images,
                'description': product_data.get('description', ''),
            }
            
            return parsed_product
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return {}
    
    def parse_category(self, category_url: str, category_name: str = "category") -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        Args:
            category_url: URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.zara.com/kz/en/man-jackets-l640.html?v1=2536906)
            category_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        print(f"\n{'='*70}")
        print(f"üõçÔ∏è  –ü–ê–†–°–ò–ù–ì –ö–ê–¢–ï–ì–û–†–ò–ò: {category_name}")
        print(f"üîó URL: {category_url}")
        print(f"{'='*70}\n")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        # –§–æ—Ä–º–∞—Ç: https://www.zara.com/{country}/{lang}/man-jackets-l{category_id}.html?v1={version}
        try:
            parts = category_url.replace('https://www.zara.com/', '').split('/')
            country = parts[0]  # kz
            lang = parts[1]     # en
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º category_id –∏–∑ —á–∞—Å—Ç–∏ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, "man-jackets-l640.html" -> "640")
            category_part = parts[2]  # man-jackets-l640.html
            category_id = category_part.split('-l')[1].split('.')[0]  # 640
            
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ v1
            if '?v1=' in category_url:
                category_id = category_url.split('?v1=')[1].split('&')[0]
            
            print(f"üìç –°—Ç—Ä–∞–Ω–∞: {country}, –Ø–∑—ã–∫: {lang}, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}")
            
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL: {e}")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = self.get_category_products(country, lang, category_id)
        
        if not products:
            print("\n‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        print(f"\nüì¶ –ü–∞—Ä—Å–∏–Ω–≥ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")
        print("="*70)
        
        parsed_products = []
        
        for i, product_data in enumerate(products, 1):
            print(f"\n[{i}/{len(products)}] –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            if i > 1:
                self._delay()
            
            parsed = self.parse_product(product_data, country, lang)
            
            if parsed:
                parsed['category'] = category_name
                parsed_products.append(parsed)
                print(f"‚úÖ {parsed['name']}")
                print(f"   üí∞ –¶–µ–Ω–∞: {parsed['price']} {parsed['currency']}")
                print(f"   üé® –¶–≤–µ—Ç: {parsed['color']}")
                print(f"   üîó URL: {parsed['url'][:80]}...")
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        print(f"\n{'='*70}")
        print(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: –°–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"{'='*70}")
        
        return parsed_products


def save_to_json(data: List[Dict], filename: str = "zara_products_api.json"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data)}")


# ==============================================================================
# MAIN - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ==============================================================================

if __name__ == "__main__":
    # URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    CATEGORY_URL = "https://www.zara.com/kz/en/man-jackets-l640.html?v1=2536906"
    CATEGORY_NAME = "man-jackets"
    
    print("="*70)
    print("üöÄ ZARA API PARSER - –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä —á–µ—Ä–µ–∑ API")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ZaraAPIParser(
        request_delay=(0.5, 1.0),   # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (API –±—ã—Å—Ç—Ä—ã–π)
        items_limit=10              # –ü–∞—Ä—Å–∏–º 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    )
    
    # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    products = parser.parse_category(CATEGORY_URL, CATEGORY_NAME)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if products:
        save_to_json(products, "zara_products_api.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(products)}")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {sum(1 for p in products if p.get('availability') == 'in_stock')}")
        print(f"   ‚Ä¢ –°–∫–æ—Ä–æ –≤ –ø—Ä–æ–¥–∞–∂–µ: {sum(1 for p in products if p.get('availability') == 'coming_soon')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
        print(f"\nüì¶ –ü–†–ò–ú–ï–† –¢–û–í–ê–†–ê:")
        print("-"*70)
        if products:
            first = products[0]
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {first['name']}")
            print(f"–¶–µ–Ω–∞: {first['price']} {first['currency']}")
            print(f"–¶–≤–µ—Ç: {first['color']}")
            print(f"–ê—Ä—Ç–∏–∫—É–ª: {first['display_reference']}")
            print(f"–ù–∞–ª–∏—á–∏–µ: {first['availability']}")
            print(f"URL: {first['url']}")
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(first['images'])}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Zara")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

