import argparse
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from scripts.interfaces import MongoInterface
from config.config_models import ZaraConfig
from zara_api_parser import ZaraAPIParser


arguments_parser = argparse.ArgumentParser(description="Zara argument parser")
arguments_parser.add_argument(
    "--gender",
    type=str,
    choices=["male", "female"],
    required=True,
    help="Male or Female catalog"
)


def save_to_mongo(mongo, collection, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB"""
    for sample in data:
        mongo.insert_data(collection, sample)


def save_to_file(filepath: str, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª {filepath}...", flush=True)
    try:
        with open(filepath, "r", encoding="utf-8") as file:
            info = json.load(file)
    except FileNotFoundError:
        info = []

    info.extend(data)
    with open(filepath, "w", encoding="utf-8") as file:
        json.dump(info, file, ensure_ascii=False, indent=4)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª", flush=True)


def run_scrapper(config: ZaraConfig, gender: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API"""
    print(f"üöÄ Starting Zara API parser for: {gender}", flush=True)
    print(f"‚è∞ Timestamp: {__import__('datetime').datetime.now()}", flush=True)

    print("üîß Initializing API parser...", flush=True)
    parser = ZaraAPIParser(
        request_delay=(config.request_delay_min, config.request_delay_max),
        items_limit=config.items_limit
    )
    print("‚úÖ API parser initialized", flush=True)
    print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {config.request_delay_min}-{config.request_delay_max} —Å–µ–∫—É–Ω–¥", flush=True)
    print(f"üì¶ –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {config.items_limit}", flush=True)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    mongo_host = os.getenv("MONGO_HOST", "localhost")
    print(f"üîå Connecting to MongoDB at {mongo_host}:27017...", flush=True)
    mongo = MongoInterface(f"mongodb://admin123:password123@{mongo_host}:27017/", database="zara_db")
    print("‚úÖ MongoDB connected", flush=True)
    
    try:
        print(f"üìÅ Creating collection: zara_{gender}_collection", flush=True)
        mongo.create_collection(f"zara_{gender}_collection")
        print("‚úÖ Collection created", flush=True)
    except Exception as e:
        print(f"‚ÑπÔ∏è Collection already exists or error: {e}", flush=True)

    # –ü–æ–ª—É—á–∞–µ–º URL –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    base_url = getattr(config, gender).url
    categories = getattr(config, gender).categories
    
    # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    total_products = 0
    
    for category in categories:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_url = base_url.format(category=category)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL
        category_name = category.split('.html')[0]
        
        print(f"\n{'='*70}", flush=True)
        print(f"üìÇ Parsing category: {category_name}", flush=True)
        print(f"üîó URL: {category_url}", flush=True)
        print(f"{'='*70}", flush=True)
        
        try:
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ API
            parsed_data = parser.parse_category(category_url, category_name)
            
            if not parsed_data:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}", flush=True)
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–¥–µ—Ä–µ
            for product in parsed_data:
                product['gender'] = gender
            
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(parsed_data)} —Ç–æ–≤–∞—Ä–æ–≤...", flush=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_to_file(f"zara_{gender}_collection.json", parsed_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
            save_to_mongo(mongo, f"zara_{gender}_collection", parsed_data)
            
            total_products += len(parsed_data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(parsed_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}", flush=True)
            
        except Exception as exc:
            print(f"‚ùå Error in parsing category: {category_name}", flush=True)
            print(f"   Error: {str(exc)}", flush=True)
            continue
    
    print(f"\n{'='*70}", flush=True)
    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", flush=True)
    print(f"üìä –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}", flush=True)
    print(f"{'='*70}", flush=True)


if __name__ == "__main__":
    args = arguments_parser.parse_args()

    config = ZaraConfig.from_yaml("config/config_zara.yaml")
    run_scrapper(config=config, gender=args.gender)

