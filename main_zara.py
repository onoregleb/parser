import argparse
import json

from scripts.interfaces import ZaraPlaywrightInterface, MongoInterface
from config.config_models import ZaraConfig


arguments_parser = argparse.ArgumentParser(description="Zara argument parser")
arguments_parser.add_argument(
    "--gender",
    type=str,
    choices=["male", "female"],
    required=True,
    help="Male or Female catalog"
)


def save_to_mongo(mongo, collection, data):
    for sample in data:
        mongo.insert_data(collection, sample)


def save_to_file(filepath: str, data):
    print("SAVING")
    print(data)
    try:
        with open(filepath, "r", encoding="utf-8") as file:
            info = json.load(file)
    except FileNotFoundError:
        info = []

    info.extend(data)
    with open(filepath, "w", encoding="utf-8") as file:
        json.dump(info, file, ensure_ascii=False, indent=4)


def run_scrapper(config: ZaraConfig, gender: str):
    print(f"üöÄ Starting Zara parser for: {gender}", flush=True)
    print(f"‚è∞ Timestamp: {__import__('datetime').datetime.now()}", flush=True)

    print("üåê Initializing Playwright browser...", flush=True)
    driver = ZaraPlaywrightInterface(
        page_loading_time=config.page_loading_time,
        request_delay=(config.request_delay_min, config.request_delay_max),
        items_limit=config.items_limit
    )
    print("‚úÖ Browser initialized", flush=True)
    print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {config.request_delay_min}-{config.request_delay_max} —Å–µ–∫—É–Ω–¥", flush=True)
    print(f"üì¶ –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {config.items_limit}", flush=True)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'mongo' –∫–∞–∫ –∏–º—è —Ö–æ—Å—Ç–∞ –≤ Docker, 'localhost' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    import os
    mongo_host = os.getenv("MONGO_HOST", "localhost")
    print(f"üîå Connecting to MongoDB at {mongo_host}:27017...", flush=True)
    mongo = MongoInterface(f"mongodb://admin123:password123@{mongo_host}:27017/", database="zara_db")
    print("‚úÖ MongoDB connected", flush=True)
    
    try:
        print(f"üìÅ Creating collection: zara_{gender}_collection", flush=True)
        mongo.create_collection(f"zara_{gender}_collection")
        print("‚úÖ Collection created", flush=True)
    except Exception as e:
        print(f"‚ÑπÔ∏è Collection already exists or error: {e}", flush=True)

    urls = getattr(config, gender).urls
    categories = getattr(config, gender).categories
    
    try:
        for url, category_name in zip(urls, categories):
            print(f"\n{'='*50}")
            print(f"Parsing category: {category_name}")
            print(f"URL: {url}")
            print(f"{'='*50}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã (—Å –ª–∏–º–∏—Ç–æ–º)
                links = driver.get_elements(url=url)
                
                if not links:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
                    continue
                
                print(f"‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(links)}")
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
                parsed_data = driver.parse_elements(links, category_name, gender)

                if parsed_data:
                    save_to_file(f"zara_{gender}_collection.json", parsed_data)
                    save_to_mongo(mongo, f"zara_{gender}_collection", parsed_data)
                    print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(parsed_data)} —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
                
                print("-" * 50)
                
            except Exception as exc:
                print(f"Error in parsing category: {category_name}\n", str(exc))
                print()
                continue
                
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        driver.close()
        print("\n‚úì –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    args = arguments_parser.parse_args()

    config = ZaraConfig.from_yaml("config/config_zara.yaml")
    run_scrapper(config=config, gender=args.gender)

